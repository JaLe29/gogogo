/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * Bastard proxy api
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Activity
} from '../model/activity'



/**
 * Get all activities
 * @summary Get all activities
 */
export const getApiActivity = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Activity[]>> => {
    
    return axios.get(
      `/api/activity`,options
    );
  }


export const getGetApiActivityQueryKey = () => {
    return [`/api/activity`] as const;
    }

    
export const getGetApiActivityQueryOptions = <TData = Awaited<ReturnType<typeof getApiActivity>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiActivity>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiActivityQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiActivity>>> = ({ signal }) => getApiActivity({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiActivity>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiActivityQueryResult = NonNullable<Awaited<ReturnType<typeof getApiActivity>>>
export type GetApiActivityQueryError = AxiosError<unknown>

/**
 * @summary Get all activities
 */
export const useGetApiActivity = <TData = Awaited<ReturnType<typeof getApiActivity>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiActivity>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiActivityQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



