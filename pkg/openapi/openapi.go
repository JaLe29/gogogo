// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Activity defines model for Activity.
type Activity struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Ip        *string    `json:"ip,omitempty"`
	ProxyId   *string    `json:"proxyId,omitempty"`
}

// Allow defines model for Allow.
type Allow struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Ip        *string    `json:"ip,omitempty"`
	ProxyId   *string    `json:"proxyId,omitempty"`
}

// Block defines model for Block.
type Block struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Ip        *string    `json:"ip,omitempty"`
	ProxyId   *string    `json:"proxyId,omitempty"`
}

// NewAllow defines model for NewAllow.
type NewAllow struct {
	Ip string `json:"ip"`
}

// NewBlock defines model for NewBlock.
type NewBlock struct {
	Ip string `json:"ip"`
}

// NewProxy defines model for NewProxy.
type NewProxy struct {
	Source string `json:"source"`
	Target string `json:"target"`
}

// Proxy defines model for Proxy.
type Proxy struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Source    *string    `json:"source,omitempty"`
	Target    *string    `json:"target,omitempty"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	// Message Message of the response
	Message string `json:"message"`
}

// DeleteApiAllowProxyIdParams defines parameters for DeleteApiAllowProxyId.
type DeleteApiAllowProxyIdParams struct {
	// Id Id of the allow
	Id string `form:"id" json:"id"`
}

// DeleteApiBlockProxyIdParams defines parameters for DeleteApiBlockProxyId.
type DeleteApiBlockProxyIdParams struct {
	// Id Id of the block
	Id string `form:"id" json:"id"`
}

// DeleteApiProxyParams defines parameters for DeleteApiProxy.
type DeleteApiProxyParams struct {
	// Id Id of the proxy
	Id string `form:"id" json:"id"`
}

// PostApiAllowProxyIdJSONRequestBody defines body for PostApiAllowProxyId for application/json ContentType.
type PostApiAllowProxyIdJSONRequestBody = NewAllow

// PostApiBlockProxyIdJSONRequestBody defines body for PostApiBlockProxyId for application/json ContentType.
type PostApiBlockProxyIdJSONRequestBody = NewBlock

// PostApiProxyJSONRequestBody defines body for PostApiProxy for application/json ContentType.
type PostApiProxyJSONRequestBody = NewProxy

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all activities
	// (GET /api/activity/{proxyId})
	GetApiActivityProxyId(c *gin.Context, proxyId string)
	// Delete a allow
	// (DELETE /api/allow/{proxyId})
	DeleteApiAllowProxyId(c *gin.Context, proxyId string, params DeleteApiAllowProxyIdParams)
	// Get all allows
	// (GET /api/allow/{proxyId})
	GetApiAllowProxyId(c *gin.Context, proxyId string)
	// Create a new allow
	// (POST /api/allow/{proxyId})
	PostApiAllowProxyId(c *gin.Context, proxyId string)
	// Delete a block
	// (DELETE /api/block/{proxyId})
	DeleteApiBlockProxyId(c *gin.Context, proxyId string, params DeleteApiBlockProxyIdParams)
	// Get all blocks
	// (GET /api/block/{proxyId})
	GetApiBlockProxyId(c *gin.Context, proxyId string)
	// Create a new block
	// (POST /api/block/{proxyId})
	PostApiBlockProxyId(c *gin.Context, proxyId string)
	// Delete a proxy
	// (DELETE /api/proxy)
	DeleteApiProxy(c *gin.Context, params DeleteApiProxyParams)
	// Get all proxies
	// (GET /api/proxy)
	GetApiProxy(c *gin.Context)
	// Create a new proxy
	// (POST /api/proxy)
	PostApiProxy(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiActivityProxyId operation middleware
func (siw *ServerInterfaceWrapper) GetApiActivityProxyId(c *gin.Context) {

	var err error

	// ------------- Path parameter "proxyId" -------------
	var proxyId string

	err = runtime.BindStyledParameter("simple", false, "proxyId", c.Param("proxyId"), &proxyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter proxyId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiActivityProxyId(c, proxyId)
}

// DeleteApiAllowProxyId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiAllowProxyId(c *gin.Context) {

	var err error

	// ------------- Path parameter "proxyId" -------------
	var proxyId string

	err = runtime.BindStyledParameter("simple", false, "proxyId", c.Param("proxyId"), &proxyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter proxyId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteApiAllowProxyIdParams

	// ------------- Required query parameter "id" -------------

	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiAllowProxyId(c, proxyId, params)
}

// GetApiAllowProxyId operation middleware
func (siw *ServerInterfaceWrapper) GetApiAllowProxyId(c *gin.Context) {

	var err error

	// ------------- Path parameter "proxyId" -------------
	var proxyId string

	err = runtime.BindStyledParameter("simple", false, "proxyId", c.Param("proxyId"), &proxyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter proxyId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAllowProxyId(c, proxyId)
}

// PostApiAllowProxyId operation middleware
func (siw *ServerInterfaceWrapper) PostApiAllowProxyId(c *gin.Context) {

	var err error

	// ------------- Path parameter "proxyId" -------------
	var proxyId string

	err = runtime.BindStyledParameter("simple", false, "proxyId", c.Param("proxyId"), &proxyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter proxyId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAllowProxyId(c, proxyId)
}

// DeleteApiBlockProxyId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiBlockProxyId(c *gin.Context) {

	var err error

	// ------------- Path parameter "proxyId" -------------
	var proxyId string

	err = runtime.BindStyledParameter("simple", false, "proxyId", c.Param("proxyId"), &proxyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter proxyId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteApiBlockProxyIdParams

	// ------------- Required query parameter "id" -------------

	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiBlockProxyId(c, proxyId, params)
}

// GetApiBlockProxyId operation middleware
func (siw *ServerInterfaceWrapper) GetApiBlockProxyId(c *gin.Context) {

	var err error

	// ------------- Path parameter "proxyId" -------------
	var proxyId string

	err = runtime.BindStyledParameter("simple", false, "proxyId", c.Param("proxyId"), &proxyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter proxyId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiBlockProxyId(c, proxyId)
}

// PostApiBlockProxyId operation middleware
func (siw *ServerInterfaceWrapper) PostApiBlockProxyId(c *gin.Context) {

	var err error

	// ------------- Path parameter "proxyId" -------------
	var proxyId string

	err = runtime.BindStyledParameter("simple", false, "proxyId", c.Param("proxyId"), &proxyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter proxyId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiBlockProxyId(c, proxyId)
}

// DeleteApiProxy operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiProxy(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteApiProxyParams

	// ------------- Required query parameter "id" -------------

	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiProxy(c, params)
}

// GetApiProxy operation middleware
func (siw *ServerInterfaceWrapper) GetApiProxy(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiProxy(c)
}

// PostApiProxy operation middleware
func (siw *ServerInterfaceWrapper) PostApiProxy(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiProxy(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/activity/:proxyId", wrapper.GetApiActivityProxyId)
	router.DELETE(options.BaseURL+"/api/allow/:proxyId", wrapper.DeleteApiAllowProxyId)
	router.GET(options.BaseURL+"/api/allow/:proxyId", wrapper.GetApiAllowProxyId)
	router.POST(options.BaseURL+"/api/allow/:proxyId", wrapper.PostApiAllowProxyId)
	router.DELETE(options.BaseURL+"/api/block/:proxyId", wrapper.DeleteApiBlockProxyId)
	router.GET(options.BaseURL+"/api/block/:proxyId", wrapper.GetApiBlockProxyId)
	router.POST(options.BaseURL+"/api/block/:proxyId", wrapper.PostApiBlockProxyId)
	router.DELETE(options.BaseURL+"/api/proxy", wrapper.DeleteApiProxy)
	router.GET(options.BaseURL+"/api/proxy", wrapper.GetApiProxy)
	router.POST(options.BaseURL+"/api/proxy", wrapper.PostApiProxy)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yXT2/TTBDGv4o173s0TQo331KQUIWACI5VDos9SRds73Z33daK/N3RjL0Jif8khla4",
	"ErfEuzM78zyzvzhbiFWmVY65sxBtwca3mAn+uIidvJeupM/aKI3GSeSV2KBwmCwcfVkrkwkHESTC4Ssn",
	"M4QQXKkRIrDOyHwDVQgyob3tx7rzsTbqsbzuCqmqEBZpqh4mV9VVquIfk6vqEz70yNWZrgrB4F0hDSYQ",
	"3dCeVZ2kp7txSZZUajuJVYWJsbM5J8wG3ekzmhS7ADqw57SnM+S36q5C+FrEMVr7Ba1WucV2iRlaKza8",
	"kKCNjdROqhwi+FgvBGoduFsMjM8QAj6KTKd00ucP7RaO1PL5V1yOzNeKK5WOE1wJ64RJAh6sQGgJIdyj",
	"sXUJlxfzizm1qDTmtBjBG34UghbuluufCS1nosHHbNtMaEVLjSqHbb1HF4g0DZoQUoHzG0EbaLZpy0JL",
	"j6RlM/N0phEZOjQWopvjvNcJKaWFwdzV7QC1CxGXCiHkIqOO9S7dXiVnCgwbHHb5uKLNtfzc8+v5nKdL",
	"5Q5z7lFoncqYW5h9t1TQ9pd80mHGgf8bXEME/832IJ41FJ7tEFztLBXGiLKeo8Nm/d79VNAeW2SZMGWf",
	"yE5sSLg961cUVPtH2Dg0L8EUXcdYvuPngQg4puVdvUz20fIo72jKfVI27q5AU+6dk+NMC1/ShAwNxjFC",
	"uuaBZOsbhpZju0Hg74TP4ZtK23pv6WibX/IVZcHOuZ9DfrR0bfuhle0w5C3/mgUiyPGh5/otlZ2cK3cF",
	"WnelkvLJbsTuRac6/LWjcqrWIFxO5iZ2GnjsvmfyN3oLG8lkjulnMr/YjWayT/qPyaMmgcU+yWQvrp+C",
	"+t37JJM5rI/J421+wUyuBTuDyYN+tHRt+3EGk7uvX8PkSbnyLExurJgckwed7zTw2H3PZO3/Zp4ksTet",
	"h8TLZvlMBB+MwJ8h+C9TkRs/SUXfr/ehluskFSms/w+l1/z5mVSfdAaTBtVod9WW4wwodU9iA6W9Js9C",
	"hEaIyRFhUPdO9Y6lr6rqZwAAAP//kCUh2U8VAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
