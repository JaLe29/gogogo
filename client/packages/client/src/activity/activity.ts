/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * Bastard proxy api
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Activity
} from '../model/activity'



/**
 * Get all activities
 * @summary Get all activities
 */
export const getApiActivityProxyId = (
    proxyId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Activity[]>> => {
    
    return axios.get(
      `/api/activity/${proxyId}`,options
    );
  }


export const getGetApiActivityProxyIdQueryKey = (proxyId: string,) => {
    return [`/api/activity/${proxyId}`] as const;
    }

    
export const getGetApiActivityProxyIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiActivityProxyId>>, TError = AxiosError<unknown>>(proxyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiActivityProxyId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiActivityProxyIdQueryKey(proxyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiActivityProxyId>>> = ({ signal }) => getApiActivityProxyId(proxyId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(proxyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiActivityProxyId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiActivityProxyIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiActivityProxyId>>>
export type GetApiActivityProxyIdQueryError = AxiosError<unknown>

/**
 * @summary Get all activities
 */
export const useGetApiActivityProxyId = <TData = Awaited<ReturnType<typeof getApiActivityProxyId>>, TError = AxiosError<unknown>>(
 proxyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiActivityProxyId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiActivityProxyIdQueryOptions(proxyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



