/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * Bastard proxy api
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  DeleteApiGuardProxyIdParams
} from '../model/deleteApiGuardProxyIdParams'
import type {
  Guard
} from '../model/guard'
import type {
  NewGuard
} from '../model/newGuard'
import type {
  SuccessResponse
} from '../model/successResponse'



/**
 * Enable guard
 * @summary Enable guard
 */
export const postApiGuardProxyId = (
    proxyId: string,
    newGuard: NewGuard, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SuccessResponse>> => {
    
    return axios.post(
      `/api/guard/${proxyId}`,
      newGuard,options
    );
  }



export const getPostApiGuardProxyIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGuardProxyId>>, TError,{proxyId: string;data: NewGuard}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiGuardProxyId>>, TError,{proxyId: string;data: NewGuard}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiGuardProxyId>>, {proxyId: string;data: NewGuard}> = (props) => {
          const {proxyId,data} = props ?? {};

          return  postApiGuardProxyId(proxyId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiGuardProxyIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiGuardProxyId>>>
    export type PostApiGuardProxyIdMutationBody = NewGuard
    export type PostApiGuardProxyIdMutationError = AxiosError<unknown>

    /**
 * @summary Enable guard
 */
export const usePostApiGuardProxyId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGuardProxyId>>, TError,{proxyId: string;data: NewGuard}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPostApiGuardProxyIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Disable guard
 * @summary Disable guard
 */
export const deleteApiGuardProxyId = (
    proxyId: string,
    params: DeleteApiGuardProxyIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SuccessResponse>> => {
    
    return axios.delete(
      `/api/guard/${proxyId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getDeleteApiGuardProxyIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiGuardProxyId>>, TError,{proxyId: string;params: DeleteApiGuardProxyIdParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiGuardProxyId>>, TError,{proxyId: string;params: DeleteApiGuardProxyIdParams}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiGuardProxyId>>, {proxyId: string;params: DeleteApiGuardProxyIdParams}> = (props) => {
          const {proxyId,params} = props ?? {};

          return  deleteApiGuardProxyId(proxyId,params,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiGuardProxyIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiGuardProxyId>>>
    
    export type DeleteApiGuardProxyIdMutationError = AxiosError<unknown>

    /**
 * @summary Disable guard
 */
export const useDeleteApiGuardProxyId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiGuardProxyId>>, TError,{proxyId: string;params: DeleteApiGuardProxyIdParams}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getDeleteApiGuardProxyIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get all guards
 * @summary Get all guards
 */
export const getApiGuardProxyId = (
    proxyId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Guard[]>> => {
    
    return axios.get(
      `/api/guard/${proxyId}`,options
    );
  }


export const getGetApiGuardProxyIdQueryKey = (proxyId: string,) => {
    return [`/api/guard/${proxyId}`] as const;
    }

    
export const getGetApiGuardProxyIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiGuardProxyId>>, TError = AxiosError<unknown>>(proxyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiGuardProxyId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiGuardProxyIdQueryKey(proxyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGuardProxyId>>> = ({ signal }) => getApiGuardProxyId(proxyId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(proxyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiGuardProxyId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiGuardProxyIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGuardProxyId>>>
export type GetApiGuardProxyIdQueryError = AxiosError<unknown>

/**
 * @summary Get all guards
 */
export const useGetApiGuardProxyId = <TData = Awaited<ReturnType<typeof getApiGuardProxyId>>, TError = AxiosError<unknown>>(
 proxyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiGuardProxyId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiGuardProxyIdQueryOptions(proxyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



