/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * Bastard proxy api
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Allow
} from '../model/allow'
import type {
  DeleteApiAllowProxyIdParams
} from '../model/deleteApiAllowProxyIdParams'
import type {
  NewAllow
} from '../model/newAllow'
import type {
  SuccessResponse
} from '../model/successResponse'



/**
 * Get all allows
 * @summary Get all allows
 */
export const getApiAllowProxyId = (
    proxyId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Allow[]>> => {
    
    return axios.get(
      `/api/allow/${proxyId}`,options
    );
  }


export const getGetApiAllowProxyIdQueryKey = (proxyId: string,) => {
    return [`/api/allow/${proxyId}`] as const;
    }

    
export const getGetApiAllowProxyIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAllowProxyId>>, TError = AxiosError<unknown>>(proxyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAllowProxyId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAllowProxyIdQueryKey(proxyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAllowProxyId>>> = ({ signal }) => getApiAllowProxyId(proxyId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(proxyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAllowProxyId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiAllowProxyIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAllowProxyId>>>
export type GetApiAllowProxyIdQueryError = AxiosError<unknown>

/**
 * @summary Get all allows
 */
export const useGetApiAllowProxyId = <TData = Awaited<ReturnType<typeof getApiAllowProxyId>>, TError = AxiosError<unknown>>(
 proxyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAllowProxyId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiAllowProxyIdQueryOptions(proxyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete a allow
 * @summary Delete a allow
 */
export const deleteApiAllowProxyId = (
    proxyId: string,
    params: DeleteApiAllowProxyIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SuccessResponse>> => {
    
    return axios.delete(
      `/api/allow/${proxyId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getDeleteApiAllowProxyIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAllowProxyId>>, TError,{proxyId: string;params: DeleteApiAllowProxyIdParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAllowProxyId>>, TError,{proxyId: string;params: DeleteApiAllowProxyIdParams}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAllowProxyId>>, {proxyId: string;params: DeleteApiAllowProxyIdParams}> = (props) => {
          const {proxyId,params} = props ?? {};

          return  deleteApiAllowProxyId(proxyId,params,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAllowProxyIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAllowProxyId>>>
    
    export type DeleteApiAllowProxyIdMutationError = AxiosError<unknown>

    /**
 * @summary Delete a allow
 */
export const useDeleteApiAllowProxyId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAllowProxyId>>, TError,{proxyId: string;params: DeleteApiAllowProxyIdParams}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getDeleteApiAllowProxyIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Create a new allow
 * @summary Create a new allow
 */
export const postApiAllowProxyId = (
    proxyId: string,
    newAllow: NewAllow, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SuccessResponse>> => {
    
    return axios.post(
      `/api/allow/${proxyId}`,
      newAllow,options
    );
  }



export const getPostApiAllowProxyIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAllowProxyId>>, TError,{proxyId: string;data: NewAllow}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAllowProxyId>>, TError,{proxyId: string;data: NewAllow}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAllowProxyId>>, {proxyId: string;data: NewAllow}> = (props) => {
          const {proxyId,data} = props ?? {};

          return  postApiAllowProxyId(proxyId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiAllowProxyIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAllowProxyId>>>
    export type PostApiAllowProxyIdMutationBody = NewAllow
    export type PostApiAllowProxyIdMutationError = AxiosError<unknown>

    /**
 * @summary Create a new allow
 */
export const usePostApiAllowProxyId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAllowProxyId>>, TError,{proxyId: string;data: NewAllow}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPostApiAllowProxyIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    