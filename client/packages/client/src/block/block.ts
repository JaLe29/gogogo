/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * Bastard proxy api
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Block
} from '../model/block'
import type {
  DeleteApiBlockProxyIdParams
} from '../model/deleteApiBlockProxyIdParams'
import type {
  NewBlock
} from '../model/newBlock'
import type {
  SuccessResponse
} from '../model/successResponse'



/**
 * Get all blocks
 * @summary Get all blocks
 */
export const getApiBlockProxyId = (
    proxyId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Block[]>> => {
    
    return axios.get(
      `/api/block/${proxyId}`,options
    );
  }


export const getGetApiBlockProxyIdQueryKey = (proxyId: string,) => {
    return [`/api/block/${proxyId}`] as const;
    }

    
export const getGetApiBlockProxyIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiBlockProxyId>>, TError = AxiosError<unknown>>(proxyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBlockProxyId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiBlockProxyIdQueryKey(proxyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiBlockProxyId>>> = ({ signal }) => getApiBlockProxyId(proxyId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(proxyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiBlockProxyId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiBlockProxyIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiBlockProxyId>>>
export type GetApiBlockProxyIdQueryError = AxiosError<unknown>

/**
 * @summary Get all blocks
 */
export const useGetApiBlockProxyId = <TData = Awaited<ReturnType<typeof getApiBlockProxyId>>, TError = AxiosError<unknown>>(
 proxyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBlockProxyId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiBlockProxyIdQueryOptions(proxyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete a block
 * @summary Delete a block
 */
export const deleteApiBlockProxyId = (
    proxyId: string,
    params: DeleteApiBlockProxyIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SuccessResponse>> => {
    
    return axios.delete(
      `/api/block/${proxyId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getDeleteApiBlockProxyIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiBlockProxyId>>, TError,{proxyId: string;params: DeleteApiBlockProxyIdParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiBlockProxyId>>, TError,{proxyId: string;params: DeleteApiBlockProxyIdParams}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiBlockProxyId>>, {proxyId: string;params: DeleteApiBlockProxyIdParams}> = (props) => {
          const {proxyId,params} = props ?? {};

          return  deleteApiBlockProxyId(proxyId,params,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiBlockProxyIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiBlockProxyId>>>
    
    export type DeleteApiBlockProxyIdMutationError = AxiosError<unknown>

    /**
 * @summary Delete a block
 */
export const useDeleteApiBlockProxyId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiBlockProxyId>>, TError,{proxyId: string;params: DeleteApiBlockProxyIdParams}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getDeleteApiBlockProxyIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Create a new block
 * @summary Create a new block
 */
export const postApiBlockProxyId = (
    proxyId: string,
    newBlock: NewBlock, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SuccessResponse>> => {
    
    return axios.post(
      `/api/block/${proxyId}`,
      newBlock,options
    );
  }



export const getPostApiBlockProxyIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiBlockProxyId>>, TError,{proxyId: string;data: NewBlock}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiBlockProxyId>>, TError,{proxyId: string;data: NewBlock}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiBlockProxyId>>, {proxyId: string;data: NewBlock}> = (props) => {
          const {proxyId,data} = props ?? {};

          return  postApiBlockProxyId(proxyId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiBlockProxyIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiBlockProxyId>>>
    export type PostApiBlockProxyIdMutationBody = NewBlock
    export type PostApiBlockProxyIdMutationError = AxiosError<unknown>

    /**
 * @summary Create a new block
 */
export const usePostApiBlockProxyId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiBlockProxyId>>, TError,{proxyId: string;data: NewBlock}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPostApiBlockProxyIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    